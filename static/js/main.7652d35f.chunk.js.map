{"version":3,"sources":["List.jsx","App.js","reportWebVitals.js","index.js"],"names":["List","props","todos","handleEdit","handleAdd","handleDelete","useState","newTodoTitle","setNewTodoTitle","isEditing","setIsEditing","currentTodo","setCurrentTodo","length","map","todo","className","htmlFor","title","completed","type","checked","onChange","id","name","value","_id","event","target","readOnly","onClick","trim","disabled","placeholder","require","config","URI","process","App","useEffect","fetch","then","res","json","setIsLoaded","setTodos","catch","error","console","log","setError","isLoaded","method","headers","body","JSON","stringify","userId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7652d35f.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst List = (props) => {\r\n  const { todos, handleEdit, handleAdd, handleDelete } = props;\r\n  const [newTodoTitle, setNewTodoTitle] = useState(\"\");\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [currentTodo, setCurrentTodo] = useState({});\r\n\r\n  return (\r\n    <>\r\n      <div>todo list ({todos.length} items)</div>\r\n      {todos.map((todo) => (\r\n        <div key={todo._id} className={\"todo-wrapper\"}>\r\n          <label\r\n            htmlFor={todo.title}\r\n            className={todo.completed ? \"completed-task\" : \"\"}\r\n          >\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={todo.completed}\r\n              onChange={() => {\r\n                handleEdit({ ...todo, completed: !todo.completed });\r\n                if (isEditing) {\r\n                  setIsEditing(false);\r\n                }\r\n              }}\r\n              id={todo.title}\r\n              name={todo.title}\r\n              value={todo.title}\r\n            />\r\n            <span className=\"checkmark\">{todo.completed}</span>\r\n            <span className=\"title\">{todo.title}</span>\r\n          </label>\r\n\r\n          <div>\r\n            {isEditing && todo._id === currentTodo._id && (\r\n              <input\r\n                type=\"text\"\r\n                onChange={(event) => {\r\n                  setCurrentTodo({ ...todo, title: event.target.value });\r\n                }}\r\n                id={todo._id}\r\n                name={todo.title}\r\n                value={currentTodo !== {} ? currentTodo.title : todo.title}\r\n                readOnly={todo.completed}\r\n              />\r\n            )}\r\n            {isEditing && todo._id === currentTodo._id && (\r\n              <button\r\n                className={\"positive\"}\r\n                onClick={() => {\r\n                  handleEdit({\r\n                    ...currentTodo,\r\n                    title: currentTodo.title.trim(),\r\n                  });\r\n                  setIsEditing(false);\r\n                }}\r\n              >\r\n                Submit change\r\n              </button>\r\n            )}\r\n            <button\r\n              disabled={todo.completed}\r\n              onClick={() => {\r\n                if (!isEditing) {\r\n                  setCurrentTodo(todo);\r\n                  setIsEditing(true);\r\n                } else {\r\n                  setCurrentTodo({});\r\n                  setIsEditing(false);\r\n                }\r\n              }}\r\n            >\r\n              {isEditing && todo._id === currentTodo._id\r\n                ? \"Close editor\"\r\n                : \"Edit task\"}\r\n            </button>\r\n            <button\r\n              title=\"Delete task\"\r\n              className={\"negative\"}\r\n              onClick={() => handleDelete(todo._id)}\r\n            >\r\n              X\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <label htmlFor=\"new-todo\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"todo\"\r\n          placeholder=\"Describe your task here\"\r\n          id={\"new-todo\"}\r\n          value={newTodoTitle}\r\n          onChange={(event) => setNewTodoTitle(event.target.value)}\r\n        />\r\n      </label>\r\n      <button\r\n        className={\"positive\"}\r\n        onClick={() => {\r\n          if (newTodoTitle !== \"\") {\r\n            handleAdd({ title: newTodoTitle.trim() });\r\n            setNewTodoTitle(\"\");\r\n          }\r\n        }}\r\n        disabled={newTodoTitle === \"\"}\r\n      >\r\n        Add new task\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import { useEffect, useState } from \"react\";\n\nimport \"./App.css\";\nimport List from \"./List.jsx\";\n\nconst dotenv = require(\"dotenv\");\ndotenv.config();\n\nconst URI = process.env.REACT_APP_URI;\n\nfunction App() {\n  useEffect(() => {\n    let mounted = true;\n\n    fetch(URI)\n      .then((res) => res.json())\n      .then((res) => {\n        if (mounted) {\n          setIsLoaded(true);\n          setTodos(res);\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error: \", error);\n        setError(\"There was a problem retrieving your to-do list.\");\n      });\n  }, []);\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [todos, setTodos] = useState([]);\n\n  const handleEdit = (currentTodo) => {\n    fetch(URI, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: JSON.stringify(currentTodo),\n    })\n      .then((res) => res.json())\n      .then((res) => setTodos(res));\n  };\n\n  function handleAdd(todo) {\n    fetch(URI, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: JSON.stringify({\n        userId: todo.userId,\n        title: todo.title,\n        completed: todo.completed,\n      }),\n    })\n      .then((res) => res.json())\n      .then((res) => setTodos(res));\n  }\n\n  function handleDelete(id) {\n    fetch(URI, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      body: JSON.stringify({ id: id }),\n    })\n      .then((res) => res.json())\n      .then((res) => setTodos(res));\n  }\n\n  return (\n    <div className=\"app\">\n      {!isLoaded && !error && <div>Loading...</div>}\n      {isLoaded && !error && todos !== [] && (\n        <List\n          todos={todos}\n          handleEdit={handleEdit}\n          handleAdd={handleAdd}\n          handleDelete={handleDelete}\n        />\n      )}\n\n      {error && error}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}