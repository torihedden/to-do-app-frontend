{"version":3,"sources":["Modal.jsx","Summary.jsx","TodoCreator.jsx","List.jsx","App.js","reportWebVitals.js","index.js"],"names":["Modal","props","currentTodo","setisDeleting","setCurrentTodo","handleDelete","className","title","onClick","_id","greeting","time","Date","getHours","Summary","listLength","TodoCreator","handleAdd","newTodoTitle","setNewTodoTitle","htmlFor","type","name","placeholder","id","value","onChange","event","target","trim","disabled","List","todos","handleEdit","useState","isEditing","setIsEditing","isDeleting","filter","todo","completed","length","map","checked","readOnly","require","config","URI","process","App","useEffect","fetch","then","res","json","setIsLoaded","setTodos","catch","error","console","log","setError","isLoaded","method","headers","body","JSON","stringify","userId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b31aac5.chunk.js","sourcesContent":["import \"./Modal.css\";\r\n\r\nconst Modal = (props) => {\r\n  const { currentTodo, setisDeleting, setCurrentTodo, handleDelete } = props;\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <div className=\"modal-prompt\">Delete \"{currentTodo.title}\" task?</div>\r\n        <div className=\"modal-warning\">This cannot be undone.</div>\r\n        <div className=\"button-wrapper\">\r\n          <button\r\n            onClick={() => {\r\n              setisDeleting(false);\r\n              setCurrentTodo({});\r\n            }}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"negative\"\r\n            onClick={() => {\r\n              setisDeleting(false);\r\n              handleDelete(currentTodo._id);\r\n              setCurrentTodo({});\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import \"./Summary.css\";\r\n\r\nconst greeting = () => {\r\n  let time = new Date().getHours();\r\n\r\n  if (time < 12) {\r\n    return \"Good morning!\";\r\n  } else if (time > 12 && time < 17) {\r\n    return \"Good afternoon!\";\r\n  } else return \"Good evening!\";\r\n};\r\n\r\nconst Summary = (props) => {\r\n  const { listLength } = props;\r\n  return (\r\n    <>\r\n      {listLength === 0 ? (\r\n        <div className=\"summary\">\r\n          <div className=\"summary-greeting\">Congratulations!</div>\r\n          You are done with your list.\r\n        </div>\r\n      ) : (\r\n        <div className=\"summary\">\r\n          <div className=\"summary-greeting\">{greeting()}</div>\r\n          <div>You have {listLength} items left on your list.</div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","const TodoCreator = (props) => {\r\n  const { handleAdd, newTodoTitle, setNewTodoTitle } = props;\r\n  return (\r\n    <div className=\"new-task-wrapper\">\r\n      <label htmlFor=\"new-todo\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"todo\"\r\n          placeholder=\"Describe your task\"\r\n          id=\"new-todo\"\r\n          value={newTodoTitle}\r\n          onChange={(event) => setNewTodoTitle(event.target.value)}\r\n        />\r\n      </label>\r\n      <button\r\n        className=\"positive\"\r\n        onClick={() => {\r\n          if (newTodoTitle !== \"\") {\r\n            handleAdd({ title: newTodoTitle.trim() });\r\n            setNewTodoTitle(\"\");\r\n          }\r\n        }}\r\n        disabled={newTodoTitle === \"\"}\r\n      >\r\n        + Add\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoCreator;\r\n","import { useState } from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport Summary from \"./Summary\";\r\nimport TodoCreator from \"./TodoCreator\";\r\nimport \"./List.css\";\r\n\r\nconst List = (props) => {\r\n  const { todos, handleEdit, handleAdd, handleDelete } = props;\r\n  const [newTodoTitle, setNewTodoTitle] = useState(\"\");\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isDeleting, setisDeleting] = useState(false);\r\n  const [currentTodo, setCurrentTodo] = useState({});\r\n\r\n  return (\r\n    <>\r\n      {isDeleting && (\r\n        <Modal\r\n          currentTodo={currentTodo}\r\n          setisDeleting={setisDeleting}\r\n          setCurrentTodo={setCurrentTodo}\r\n          handleDelete={handleDelete}\r\n        />\r\n      )}\r\n\r\n      <Summary listLength={todos.filter((todo) => !todo.completed).length} />\r\n\r\n      <TodoCreator\r\n        handleAdd={handleAdd}\r\n        newTodoTitle={newTodoTitle}\r\n        setNewTodoTitle={setNewTodoTitle}\r\n      />\r\n\r\n      {/* Incompleted tasks */}\r\n      <div className=\"uncompleted-todos\">\r\n        {todos\r\n          .filter((todo) => !todo.completed)\r\n          .map((todo) => (\r\n            <div key={todo._id} className=\"todo-wrapper\">\r\n              <label\r\n                htmlFor={todo.title}\r\n                className={todo.completed ? \"completed-task\" : \"\"}\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={todo.completed}\r\n                  onChange={() => {\r\n                    handleEdit({ ...todo, completed: !todo.completed });\r\n                    if (isEditing) {\r\n                      setIsEditing(false);\r\n                    }\r\n                  }}\r\n                  id={todo.title}\r\n                  name={todo.title}\r\n                  value={todo.title}\r\n                />\r\n                <span className=\"checkmark\">{todo.completed}</span>\r\n                {!(isEditing && currentTodo._id === todo._id) && (\r\n                  <span className=\"title\">{todo.title}</span>\r\n                )}\r\n              </label>\r\n\r\n              {isEditing && todo._id === currentTodo._id && (\r\n                <>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={(event) => {\r\n                      setCurrentTodo({ ...todo, title: event.target.value });\r\n                    }}\r\n                    id={todo._id}\r\n                    name={todo.title}\r\n                    value={currentTodo !== {} ? currentTodo.title : todo.title}\r\n                    readOnly={todo.completed}\r\n                  />\r\n\r\n                  <div className=\"editing-wrapper\">\r\n                    <button\r\n                      onClick={() => {\r\n                        setCurrentTodo({});\r\n                        setIsEditing(false);\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n\r\n                    <button\r\n                      title=\"Save\"\r\n                      className=\"positive\"\r\n                      disabled={currentTodo.title === \"\"}\r\n                      onClick={() => {\r\n                        handleEdit({\r\n                          ...currentTodo,\r\n                          title: currentTodo.title.trim(),\r\n                        });\r\n                        setIsEditing(false);\r\n                      }}\r\n                    >\r\n                      Save\r\n                    </button>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {!isEditing && (\r\n                <div className=\"editing-wrapper\">\r\n                  <button\r\n                    title=\"Edit task\"\r\n                    disabled={todo.completed}\r\n                    onClick={() => {\r\n                      setCurrentTodo(todo);\r\n                      setIsEditing(true);\r\n                    }}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n\r\n                  <button\r\n                    title=\"Delete task\"\r\n                    className={\"positive delete-button\"}\r\n                    onClick={() => {\r\n                      setCurrentTodo(todo);\r\n                      setisDeleting(currentTodo);\r\n                    }}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n      </div>\r\n\r\n      {/* Completed tasks */}\r\n      <div className=\"completed-todos\">\r\n        {todos\r\n          .filter((todo) => todo.completed)\r\n          .map((todo) => (\r\n            <div key={todo._id} className=\"todo-wrapper\">\r\n              <label\r\n                htmlFor={todo.title}\r\n                className={todo.completed ? \"completed-task\" : \"\"}\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={todo.completed}\r\n                  onChange={() => {\r\n                    handleEdit({ ...todo, completed: !todo.completed });\r\n                    if (isEditing) {\r\n                      setIsEditing(false);\r\n                    }\r\n                  }}\r\n                  id={todo.title}\r\n                  name={todo.title}\r\n                  value={todo.title}\r\n                />\r\n                <span className=\"checkmark\">{todo.completed}</span>\r\n                {!(isEditing && currentTodo._id === todo._id) && (\r\n                  <span className=\"title\">{todo.title}</span>\r\n                )}\r\n              </label>\r\n              <button\r\n                title=\"Delete task\"\r\n                className=\"positive\"\r\n                onClick={() => {\r\n                  setCurrentTodo(todo);\r\n                  setisDeleting(currentTodo);\r\n                }}\r\n              >\r\n                X\r\n              </button>\r\n            </div>\r\n          ))}\r\n      </div>\r\n\r\n      <div className=\"delete-all-wrapper\">\r\n        <button\r\n          className={\"negative delete-all-button\"}\r\n          title=\"Delete all completed tasks\"\r\n        >\r\n          Delete all completed tasks\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport List from \"./List.jsx\";\r\n\r\nconst dotenv = require(\"dotenv\");\r\ndotenv.config();\r\n\r\nconst URI = process.env.REACT_APP_URI;\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    fetch(URI)\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (mounted) {\r\n          setIsLoaded(true);\r\n          setTodos(res);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error: \", error);\r\n        setError(\"There was a problem retrieving your to-do list.\");\r\n      });\r\n  }, []);\r\n\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const handleEdit = (currentTodo) => {\r\n    fetch(URI, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(currentTodo),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => setTodos(res));\r\n  };\r\n\r\n  function handleAdd(todo) {\r\n    fetch(URI, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        userId: todo.userId,\r\n        title: todo.title,\r\n        completed: todo.completed,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => setTodos(res));\r\n  }\r\n\r\n  function handleDelete(id) {\r\n    fetch(URI, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ id: id }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => setTodos(res));\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {!isLoaded && !error && (\r\n        <div className=\"loading\">\r\n          <div>Loading</div>\r\n          <div className=\"loading-dots\"></div>\r\n        </div>\r\n      )}\r\n\r\n      {isLoaded && !error && todos !== [] && (\r\n        <List\r\n          todos={todos}\r\n          handleEdit={handleEdit}\r\n          handleAdd={handleAdd}\r\n          handleDelete={handleDelete}\r\n        />\r\n      )}\r\n\r\n      {error && error}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}